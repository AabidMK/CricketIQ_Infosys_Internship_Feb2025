# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zfBPk7wDoVahG_QytyACZSppqmuTbcww
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
df=pd.read_csv('/content/matches.csv')
print(df)

print(df.isnull().sum())

print(df.player_of_match)

df1=pd.read_csv('/content/deliveries.csv')
print(df1)
print(df1.columns)

print(df1.isnull().sum())

#1.Total runs scored per over

runs_per_over = df1.groupby(['match_id', 'over'])['total_runs'].sum().reset_index()
sns.barplot(data=runs_per_over, x='over', y='total_runs',palette="Blues")
plt.title('Total Runs Scored Per Over')
plt.xlabel('Over')
plt.ylabel('Total Runs')
plt.show()

# 2. Dismissal Types Distribution

plt.figure(figsize=(10, 5))
sns.countplot(y=df1['dismissal_kind'], order=df1['dismissal_kind'].value_counts().index)
plt.title('Dismissal Types Distribution')
plt.xlabel('Count')
plt.ylabel('Dismissal Type')
plt.show()

# 3. Total Extra Runs Conceded by Teams

extra_runs = df1.groupby('bowling_team')['extra_runs'].sum().reset_index()
sns.barplot(data=extra_runs, x='extra_runs', y='bowling_team')
plt.title('Total Extra Runs Conceded by Teams')
plt.xlabel('Extra Runs')
plt.ylabel('Team')
plt.show()

# 4. Average Runs Per Over

avg_runs_per_over = runs_per_over.groupby('over')['total_runs'].mean().reset_index()
sns.lineplot(data=avg_runs_per_over, x='over', y='total_runs', marker='*')
plt.title('Average Runs Per Over')
plt.xlabel('Over')
plt.ylabel('Average Runs')
plt.show()

# 5. Distribution of Runs Per Ball

runs_per_ball = df1['batsman_runs'].value_counts().sort_index()
sns.barplot(x=runs_per_ball.index, y=runs_per_ball.values,color='green')
plt.title('Distribution of Runs Per Ball')
plt.xlabel('Runs per Ball')
plt.ylabel('Count')
plt.show()

# 6. Most Sixes Hit by Players
sixes = df1[df1['batsman_runs'] == 6].groupby('batter').size().reset_index(name='sixes')
top_six_hitters = sixes.nlargest(10, 'sixes')
sns.barplot(data=top_six_hitters, x='sixes', y='batter',color='yellow')
plt.title('Most Sixes Hit by Players')
plt.xlabel('Sixes')
plt.ylabel('Batsman')
plt.show()

# 7. Top 10 Batsmen by Strike Rate
df1 = df1.rename(columns={'batsman_name': 'batsman'})
batsman_stats = df1.groupby('batter').agg({'batsman_runs': 'sum', 'ball': 'count'}).reset_index()
batsman_stats['strike_rate'] = (batsman_stats['batsman_runs'] / batsman_stats['ball']) * 100
top_batsmen = batsman_stats.nlargest(10, 'strike_rate')
sns.barplot(data=top_batsmen, x='strike_rate', y='batter',color='red')
plt.title('Top 10 Batsmen by Strike Rate')
plt.xlabel('Strike Rate')
plt.ylabel('Batsman')
plt.show()

# 8. Dot Ball Percentage by Bowler
dot_balls = df1[df1['total_runs'] == 0].groupby('bowler').size()
total_balls = df1.groupby('bowler').size()
dot_ball_percentage = (dot_balls / total_balls * 100).reset_index(name='dot_ball_percentage')
top_dot_bowlers = dot_ball_percentage.nlargest(10, 'dot_ball_percentage')
sns.barplot(data=top_dot_bowlers, x='dot_ball_percentage', y='bowler')
plt.title('Dot Ball Percentage by Bowler')
plt.xlabel('Dot Ball %')
plt.ylabel('Bowler')
plt.show()

# 9. Top 10 Bowlers Conceding Most Boundaries
boundaries = df1[df1['batsman_runs'].isin([4, 6])].groupby('bowler').size().reset_index(name='boundaries')
top_boundary_bowlers = boundaries.nlargest(10, 'boundaries')
sns.scatterplot(data=top_boundary_bowlers, x='boundaries', y='bowler')
plt.title('Top 10 Bowlers Conceding Most Boundaries')
plt.xlabel('Boundaries Conceded')
plt.ylabel('Bowler')
plt.show()

# 10. Wicket Distribution Across Overs
wickets = df1[df1['dismissal_kind'].notna()].groupby('over').size().reset_index(name='wickets')
sns.scatterplot(data=wickets, x='over', y='wickets', marker='o',color='green')
plt.title('Wicket Distribution Across Overs')
plt.xlabel('Over')
plt.ylabel('Wickets')
plt.show()

# 11. Total Runs Scored in Powerplay
powerplay_runs = df1[df1['over'] <= 6].groupby('match_id')['total_runs'].sum().reset_index()
sns.histplot(powerplay_runs['total_runs'], bins=20, kde=True)
plt.title('Total Runs Scored in Powerplay')
plt.xlabel('Total Runs')
plt.ylabel('Frequency')
plt.show()

# 12. Total Runs Scored in Death Overs
death_runs = df1[df1['over'] >= 16].groupby('match_id')['total_runs'].sum().reset_index()
sns.histplot(death_runs['total_runs'], bins=20, kde=True)
plt.title('Total Runs Scored in Death Overs')
plt.xlabel('Total Runs')
plt.ylabel('Frequency')
plt.show()

# 13. Top 10 Most Economical Bowlers
economy = df1.groupby('bowler').agg({'total_runs': 'sum', 'ball': 'count'}).reset_index()
economy['economy_rate'] = (economy['total_runs'] / economy['ball']) * 6
top_economical_bowlers = economy.nsmallest(10, 'economy_rate')
sns.barplot(data=top_economical_bowlers, x='economy_rate', y='bowler',color='yellow')
plt.title('Top 10 Most Economical Bowlers')
plt.xlabel('Economy Rate')
plt.ylabel('Bowler')
plt.show()